#https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%201&url=worlds%2Ftutorial_en%2Fhurdle1.json
'''
def turn_right():
    turn_left()
    turn_left()
    turn_left()

for i in range(6):
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

#Solution
def turn_right():
    turn_left()
    turn_left()
    turn_left()

def jump():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()

for step in range(6):
    jump()
'''
#--------------------------------------
# 허들 2단계
'''
def turn_right():
    turn_left()
    turn_left()
    turn_left()


def jump():
    move()
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()


while True:
    jump()
    if at_goal():
        break


# Solution
while at_goal() !=True:
    jump()

while not at_goal():
    jump()     
'''

#---------------------------------------------
#허들 3단계 62
'''
def turn_right():
    turn_left()
    turn_left()
    turn_left()


def jump():
    turn_left()
    move()
    turn_right()
    move()
    turn_right()
    move()
    turn_left()


while at_goal() != True:
    if wall_in_front():
        jump()
    else:
        move()
'''

# -----------------------------------------------
# 허들 4단계
# https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Hurdle%204&url=worlds%2Ftutorial_en%2Fhurdle4.json
'''
def turn_right():
    turn_left()
    turn_left()
    turn_left()


def jump():
    turn_left()
    if wall_on_right() and front_is_clear():
        move()
    elif wall_in_front() and wall_on_right():
        turn_left()
        move()
    else:
        turn_right()
        move()
        turn_right()
        move()


while at_goal() != True:
    if front_is_clear() and right_is_clear():
        turn_right()
        move()
    elif wall_in_front() and right_is_clear():
        turn_right()
        jump()
    elif wall_in_front() and wall_on_right():
        jump()
    else:
        move()
'''

#Solution
'''
def jump():
    turn_left()
    while wall_on_right():
        move()
    turn_right()
    move()
    turn_right()
    while front_is_clear():
        move()
    turn_left()

while not at_goal():
    if wall_in_front():
        jump()
    else:
        move()
'''
# 내가 한 풀이는 문제가 생길때마다 해당되는 부분을 추가한 코드
# 솔루션을 보고 내 풀이를 보고 나니 함수의 의미자체가 퇴화한 느낌이 있었다.
# 풀이에 급급해서 함수의 용도를 제대로 살리지 못한것같다.


#-------------------------------------------------------
# Final project : 미로 탈출
# Hint: 1) 오른쪽벽을 따라서 2) 직진 3) 왼쪽
# https://reeborg.ca/reeborg.html?lang=en&mode=python&menu=worlds%2Fmenus%2Freeborg_intro_en.json&name=Maze&url=worlds%2Ftutorial_en%2Fmaze1.json

def turn_right():
    turn_left()
    turn_left()
    turn_left()

def find():
    if right_is_clear():
        turn_right()
    elif wall_on_right():
        turn_left()
    else:
        turn_right()

while not at_goal():
    if wall_in_front():
        find()
    else:
        move()

# 첫번째시도 오류부분
# 사진에서 오른쪽방향이 출구지만 앞이 비어있기때문에 앞으로 가게되고 결과적으론 무한반복을 하게된다.
# 경우의 수를 더 정밀하게 생각해보기
'''
def turn_right():
    turn_left()
    turn_left()
    turn_left()


def find():
    if right_is_clear() and front_is_clear():
        move()
    elif right_is_clear():
        turn_right()
        move()
    elif wall_on_right() and front_is_clear():
        move()
    elif wall_on_right() and wall_in_front():
        turn_left()


while not at_goal():
    if wall_in_front():
        find()
    else:
        move()
'''
#Solution

def turn_right():
    turn_left()
    turn_left()
    turn_left()

while front_is_clear():
    move()
turn_left()

while not at_goal():
    if right_is_clear():
        turn_right()
        move()
    elif front_is_clear():
        move()
    else:
        turn_left()

